package Panel;

import Model.Asignatura;
import Model.Estudiante;
import Model.Horario;
import Model.Matricula;
import Model.Persona;
import Model.Profesor;
import Model.Salon;
import Repository.AsignaturaImpl;
import Repository.EstudianteImpl;
import Repository.HorarioImpl;
import Repository.MatriculaImpl;
import Repository.PersonaImpl;
import Repository.ProfesorImpl;
import Repository.Repository;
import Repository.SalonImpl;
import java.util.List;
import java.util.TreeSet;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;

/**
 * @Julián
 */
public class VerHorario extends javax.swing.JPanel {
    
    private static Repository estudianteRepository= new EstudianteImpl();
    private static Repository matriculaRepository= new MatriculaImpl();
    private static Repository asignaturaRepository= new AsignaturaImpl();
    private static Repository horarioRepository= new HorarioImpl();
    private static Repository salonRepository=new SalonImpl();
    private static Repository profesorRepository=new ProfesorImpl();
    private static Repository personaRepository=new PersonaImpl();
    List<Horario> listaHorarios=horarioRepository.listar();
    List<Estudiante> listaEstudiantes=estudianteRepository.listar();
    List<Matricula> listaMatriculas=matriculaRepository.listar();
    List<Asignatura> listaAsignaturas=asignaturaRepository.listar();
    
    public VerHorario() {
        initComponents();
        
        setSize(1500, 1100); // Tamaño mediano¿'
//        Color colorTranslucido = new Color(255, 255, 255, 128);
        jtfNumeroEstudiante.setVisible(true);
    }
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jtfNumeroEstudiante = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtHorario = new javax.swing.JTable();

        setOpaque(false);
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jtfNumeroEstudiante.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jtfNumeroEstudiante.setForeground(new java.awt.Color(255, 255, 254));
        jtfNumeroEstudiante.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createMatteBorder(2, 2, 2, 2, new java.awt.Color(255, 255, 255)), "Numero de estudiante", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Times New Roman", 3, 14), new java.awt.Color(255, 255, 255))); // NOI18N
        jtfNumeroEstudiante.setOpaque(true);
        jtfNumeroEstudiante.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtfNumeroEstudianteActionPerformed(evt);
            }
        });
        jtfNumeroEstudiante.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jtfNumeroEstudianteKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jtfNumeroEstudianteKeyReleased(evt);
            }
        });
        add(jtfNumeroEstudiante, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 40, 170, -1));

        jtHorario.setBorder(javax.swing.BorderFactory.createMatteBorder(2, 2, 2, 2, new java.awt.Color(255, 255, 254)));
        jtHorario.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        jtHorario.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "Aquí se mostrarán los datos"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jtHorario.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jtHorario.setName(""); // NOI18N
        jScrollPane1.setViewportView(jtHorario);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 110, 800, 390));
    }// </editor-fold>//GEN-END:initComponents

    public DefaultTableModel obtenerModeloTabla() {
        DefaultTableModel modelo = new DefaultTableModel();
        jtHorario.setModel(modelo);
        
        modelo.addColumn("Creditos");
        modelo.addColumn("Nombre");
        modelo.addColumn("Día de la semana");
        modelo.addColumn("Hora Inicio");
        modelo.addColumn("Hora Fin");
        modelo.addColumn("Profesor");
        modelo.addColumn("Salón");
        
        // Obtener el modelo de la tabla
        TableColumnModel columnModel = jtHorario.getColumnModel();

        // Definir el ancho preferido para cada columna
        columnModel.getColumn(0).setPreferredWidth(10);
        columnModel.getColumn(1).setPreferredWidth(280);
        columnModel.getColumn(2).setPreferredWidth(40);
        columnModel.getColumn(3).setPreferredWidth(40);
        columnModel.getColumn(4).setPreferredWidth(40);
        columnModel.getColumn(5).setPreferredWidth(10); 
        columnModel.getColumn(6).setPreferredWidth(10);
        // Agregar columnas u otras configuraciones según tus necesidades
        return modelo;
    }
    
    public void actualizarTablas(){
        listaHorarios=horarioRepository.listar();
        listaEstudiantes=estudianteRepository.listar();
        listaMatriculas=matriculaRepository.listar();
        listaAsignaturas=asignaturaRepository.listar();
    }
    
    public int alumnoRegistrado(){
        int alumnoRegistrado=Integer.parseInt(jtfNumeroEstudiante.getText());
        return alumnoRegistrado;
    }
    
    public void rellenarHorario(){
         actualizarTablas();
        String textoNumeroEstudiante = jtfNumeroEstudiante.getText().trim();

        // Verificar si el campo de texto está vacío
        if (textoNumeroEstudiante.isEmpty()) {
            // Mostrar un mensaje de error o manejar la situación según sea necesario
            System.out.println("El campo de texto está vacío. Por favor, ingrese un número de estudiante.");
            return;
        }

        // Verificar si el campo de texto contiene caracteres no numéricos
        if (!textoNumeroEstudiante.matches("\\d+")) {
            // Mostrar un mensaje de error o manejar la situación según sea necesario
            System.out.println("El campo de texto contiene caracteres no válidos. Por favor, ingrese solo números.");
            return;
        }
        int alumnoRegistrado=Integer.parseInt(textoNumeroEstudiante);
        int id_matricula=0,id_salon=0,id_profesor;
        DefaultTableModel modelo=obtenerModeloTabla();
        System.out.println("Se obtuvo el modelo de la tabla");
        TreeSet<Integer> listaIdAsignaturas = new TreeSet<>();
        Profesor p=null;
        Salon s=null;
        Persona per=null;
        
        for (Matricula m : listaMatriculas) {
            System.out.println("Alumno id de matricula: "+m.getAlumno_id());
            System.out.println("alumno que registro el usuario: "+alumnoRegistrado);
            if(alumnoRegistrado==m.getAlumno_id()){
                id_matricula=m.getId();
                System.out.println("id de la matricula : "+id_matricula);
                break;
            }
        }
        for (Horario h : listaHorarios) {
            System.out.println("Id de la matricula encontrada: "+id_matricula);
            System.out.println("Id de la matricula del horario: "+h.getMatricula_id());
            if(id_matricula==h.getMatricula_id()){
                System.out.println("id Asignatura agregada: "+h.getAsignatura_id());
                listaIdAsignaturas.add(h.getAsignatura_id());
            }
        }
        for (Asignatura a : listaAsignaturas) {
            for (Integer Ida : listaIdAsignaturas) {
                System.out.println(Ida);
                System.out.println(a.getAsignatura_id());
                if(a.getAsignatura_id()==Ida){
                    p=(Profesor) profesorRepository.porCodigo(a.getProfesor_id());
                    per=(Persona) personaRepository.porCodigo(p.getPersona_id());
                    s=(Salon) salonRepository.porCodigo(a.getSalon_id());
                    Object[] fila = {
                        a.getCreditos(),
                        a.getNombre_combinado(),
                        a.getDia_semana(),
                        a.getHora_inicio(),
                        a.getHora_fin(),
                        per.getNombre(),
                        s.getNumero_especifico()
                    };
                    modelo.addRow(fila);
                }
            }
        }
    }
    
    
    private void jtfNumeroEstudianteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtfNumeroEstudianteActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jtfNumeroEstudianteActionPerformed

    private void jtfNumeroEstudianteKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtfNumeroEstudianteKeyReleased
        if(!jtfNumeroEstudiante.getText().equals("")){
                rellenarHorario();
        }else if(jtfNumeroEstudiante.getText().equals("")){
            jtHorario.setVisible(false);
        }
    }//GEN-LAST:event_jtfNumeroEstudianteKeyReleased

    private void jtfNumeroEstudianteKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtfNumeroEstudianteKeyPressed
        // TODO add your handling code here:
        if(!jtfNumeroEstudiante.getText().equals("")){
                rellenarHorario();
                System.out.println("Se rellenó el horario");
        }else if(jtfNumeroEstudiante.getText().equals("")){
            jtHorario.setVisible(false);
        }
    }//GEN-LAST:event_jtfNumeroEstudianteKeyPressed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    public javax.swing.JTable jtHorario;
    private javax.swing.JTextField jtfNumeroEstudiante;
    // End of variables declaration//GEN-END:variables
}
